Metadata-Version: 2.4
Name: youtube-analytics
Version: 1.0.0
Summary: A comprehensive analytics toolkit for YouTube Studio data
Author-email: Duong Cao Nhan <duongcaonhan@example.com>
License: MIT
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pandas>=1.5.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: plotly>=5.10.0
Requires-Dist: streamlit>=1.15.0
Requires-Dist: dash>=2.6.0
Requires-Dist: scikit-learn>=1.1.0
Requires-Dist: joblib>=1.1.0
Requires-Dist: openpyxl>=3.0.9
Requires-Dist: kaleido>=0.2.1
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=3.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"

# 📺 YouTube Studio Data Analytics - Modular Edition

A comprehensive, modular Python application for analyzing YouTube Studio data with interactive visualizations, machine learning predictions, and automated reporting.

## 🚀 Features

- **📊 Interactive Dashboards**: Web-based dashboards using Streamlit and Dash
- **📈 Time Series Analysis**: Views, likes, and comments trends over time  
- **🎯 Engagement Analytics**: Like rates, comment rates, and engagement patterns
- **👥 Subscriber Insights**: Growth and decline analysis with detailed metrics
- **🤖 ML Predictions**: Machine learning models to predict video performance
- **📁 Export Reports**: Automated Excel, JSON, and HTML report generation
- **🔥 Correlation Analysis**: Performance correlation heatmaps
- **📱 Responsive Design**: Works on desktop and mobile devices
- **🏗️ Modular Architecture**: Professional code structure for maintainability

## 📋 Project Structure

```
YouTubeStudioDataAnalytics/
├── 🎯 main.py                       # Main entry point with CLI
├── � src/                          # Source code modules
│   ├── 📊 analytics/                # Core analytics package
│   │   ├── __init__.py             # Package initialization
│   │   ├── core.py                 # Main YouTubeAnalytics class
│   │   ├── data_loader.py          # Data loading and preprocessing
│   │   ├── visualizations.py      # Chart generation with Plotly
│   │   └── ml_predictor.py         # Machine learning models
│   ├── 🌐 dashboards/              # Dashboard implementations
│   │   ├── __init__.py             # Dashboard package init
│   │   ├── streamlit_app.py        # Streamlit dashboard
│   │   └── dash_app.py             # Dash dashboard
│   └── �️ utils/                   # Utility modules
│       ├── __init__.py             # Utils package init
│       ├── config.py               # Configuration management
│       ├── data_utils.py           # Data validation & statistics
│       └── export_utils.py         # Export and reporting utilities
├── 📁 data/                         # Data directory
│   ├── sample/                     # Sample data files
│   │   ├── videos.csv              # Sample video data
│   │   └── subscribers.csv         # Sample subscriber data
│   └── exports/                    # Generated reports and charts
├── ⚙️ config/                      # Configuration files
│   └── config.json                 # Default configuration
├── 🧪 tests/                       # Test suite
│   ├── __init__.py                 # Test package init
│   └── test_imports.py             # Import tests
├── 📓 notebooks/                   # Jupyter notebooks
├── 📋 docs/                        # Documentation
├── 📦 requirements.txt             # Python dependencies
└── 📖 README.md                    # This file
```

## 🛠️ Quick Setup

### Installation

```bash
# Clone the repository
git clone https://github.com/DuongCaoNhan/YouTubeStudioDataAnalytics.git
cd YouTubeStudioDataAnalytics

# Install dependencies
pip install -r requirements.txt

# Or install individually
pip install pandas plotly streamlit dash scikit-learn openpyxl jupyter
```

## 📊 Getting Your YouTube Data

### From YouTube Studio:

1. **Go to YouTube Studio** → Analytics
2. **Click "Export Report"** tab
3. **Select date range** and metrics
4. **Export as CSV** files:
   - `videos.csv`: Video performance data
   - `subscribers.csv`: Subscriber activity data

### Required CSV Columns:

**videos.csv:**
```
Title, Publish Date, Views, Likes, Comments, Duration (minutes)
```

**subscribers.csv:**
```
Date, Subscribers Gained, Subscribers Lost, Net Subscribers
```

## 🚀 Usage Options

### 1. 🎯 Command Line Interface (NEW!)

```bash
# Run complete analytics pipeline
python main.py --analysis

# Start interactive Streamlit dashboard
python main.py --streamlit

# Start professional Dash dashboard  
python main.py --dash

# Quick data analysis only
python main.py --data-only

# ML prediction demonstration
python main.py --ml-demo

# Interactive mode (default)
python main.py
```

### 2. 📊 Programmatic Usage

```python
from src.analytics import YouTubeAnalytics

# Initialize with your data
analytics = YouTubeAnalytics(
    videos_file="data/sample/videos.csv",
    subscribers_file="data/sample/subscribers.csv"
)

# Run complete analysis
results = analytics.run_complete_analysis()

# Generate specific visualizations
charts = analytics.create_all_visualizations()

# Train ML models
ml_results = analytics.train_prediction_model()

# Export results
analytics.export_results("output/")
```

### 4. 📁 Generated Outputs

After running analysis, you'll find:

```
data/exports/
├── 📊 youtube_analytics_report.xlsx    # Excel report with multiple sheets
├── 📈 charts/                         # Interactive HTML charts
│   ├── views_timeline.html
│   ├── engagement_comparison.html
│   ├── correlation_heatmap.html
│   └── ... (10 chart files)
├── 🤖 ml_model.joblib                 # Trained ML model
├── 📄 analysis_results.json           # Complete results in JSON
├── 📋 processed_videos.csv            # Processed video data
└── 📋 processed_subscribers.csv       # Processed subscriber data
```

### 5. 🔧 Configuration

Customize behavior via `config/config.json`:

```json
{
  "ml": {
    "default_model_type": "linear",
    "hyperparameter_tuning": true
  },
  "visualization": {
    "default_theme": "plotly_white",
    "color_palette": ["#1f77b4", "#ff7f0e", "..."]
  }
}
```

**Features:**
- Complete analytics pipeline
- Interactive Plotly charts
- Summary statistics
- ML predictions
- Excel report export

### 2. 🌐 Streamlit Web Dashboard

```bash
streamlit run streamlit_dashboard.py
```

**Then open:** http://localhost:8501

**Features:**
- Real-time interactive dashboard
- Multi-page navigation
- Date range filtering
- Live data updates
- Mobile-responsive design

### 3. 🌐 Dash Web Dashboard

```bash
python dash_dashboard.py
```

**Then open:** http://localhost:8050

**Features:**
- Professional dashboard interface
- Advanced interactivity
- Custom styling
- Real-time updates

### 4. 📓 Jupyter Notebook Analysis

```bash
jupyter notebook youtube_analytics_notebook.ipynb
```

**Features:**
- Step-by-step analysis
- Detailed explanations
- Interactive exploration
- Customizable analysis

## 📈 Key Analytics Features

### 📊 Video Performance Metrics

- **Views Analysis**: Track view patterns over time
- **Engagement Rates**: Like rate and comment rate calculations  
- **Performance Comparison**: Compare videos side-by-side
- **Top Performers**: Identify your best-performing content

### 👥 Subscriber Analytics

- **Growth Tracking**: Monitor subscriber gains and losses
- **Activity Patterns**: Analyze subscriber behavior over time
- **Net Growth**: Calculate overall subscriber growth trends

### 🤖 Machine Learning Predictions

- **View Prediction**: Predict views for new videos
- **Feature Importance**: Understand what drives performance
- **Model Accuracy**: R² scores and performance metrics
- **Interactive Predictor**: Test different video parameters

### 📊 Visualization Types

- **Line Charts**: Time series trends
- **Bar Charts**: Performance comparisons
- **Scatter Plots**: Correlation analysis
- **Heatmaps**: Performance correlation matrices
- **Histograms**: Distribution analysis
- **Bubble Charts**: Multi-dimensional analysis

## 🎯 Sample Insights You'll Get

### 📈 Performance Insights
- Which video topics perform best
- Optimal video length for your audience
- Best publishing times and patterns
- Engagement rate benchmarks

### 🎬 Content Strategy
- Content types that drive most engagement
- Correlation between video length and performance
- Subscriber impact of different content types
- Seasonal performance patterns

### 📊 Predictive Analytics
- Expected performance for new videos
- Feature importance for video success
- Performance confidence intervals
- Optimization recommendations

## ⚙️ Configuration

Edit `config.ini` to customize:

```ini
[data_files]
videos_file = your_videos.csv
subscribers_file = your_subscribers.csv

[dashboard]
streamlit_port = 8501
dash_port = 8050

[visualization]
youtube_red = #FF0000
chart_height = 500
```

## 📁 Export Options

### Excel Reports
- Comprehensive analytics data
- Summary statistics
- Top performers lists
- Subscriber activity data

### PDF Reports (Coming Soon)
- Executive summary
- Key visualizations
- Performance insights
- Recommendations

## 🔧 Advanced Features

### 🎮 Interactive Prediction Tool
Test how different parameters affect predicted views:
- Video duration
- Expected engagement rates
- Content type factors

### 📊 Custom Metrics
- Engagement Rate = (Likes + Comments) / Views × 100
- Like Rate = Likes / Views × 100  
- Comment Rate = Comments / Views × 100
- Performance Score = Combined weighted metrics

### 🔍 Correlation Analysis
- Identify relationships between metrics
- Understand performance drivers
- Optimize content strategy

## 🛠️ Troubleshooting

### Common Issues:

**1. Import Errors**
```bash
pip install --upgrade -r requirements.txt
```

**2. Data Loading Issues**
- Check CSV file format and column names
- Ensure dates are in YYYY-MM-DD format
- Verify file paths in config.ini

**3. Dashboard Not Loading**
- Check if ports 8501/8050 are available
- Try different ports in config.ini
- Restart the dashboard application

**4. Chart Display Issues**
- Update your browser
- Clear browser cache
- Check Plotly version: `pip install --upgrade plotly`

## 📚 Dependencies

### Core Libraries:
- **pandas**: Data manipulation and analysis
- **plotly**: Interactive visualizations
- **numpy**: Numerical computations
- **scikit-learn**: Machine learning models

### Dashboard Libraries:
- **streamlit**: Web dashboard framework
- **dash**: Professional dashboard framework

### Export Libraries:
- **openpyxl**: Excel file generation
- **reportlab**: PDF report generation

## 🤝 Contributing

We welcome contributions! Please:

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🆘 Support

- **Issues**: Report bugs or request features on GitHub
- **Documentation**: Check the wiki for detailed guides
- **Community**: Join discussions in the Issues section

## 🔮 Roadmap

### Upcoming Features:
- [ ] **Real-time API Integration** with YouTube Data API
- [ ] **Advanced ML Models** (Random Forest, Neural Networks)
- [ ] **Automated Insights** with AI-generated recommendations
- [ ] **Team Collaboration** features for multiple users
- [ ] **Mobile App** for on-the-go analytics
- [ ] **Custom Alerts** for performance thresholds
- [ ] **A/B Testing Tools** for content optimization
- [ ] **Competitive Analysis** features

## 📞 Contact

- **GitHub**: [@DuongCaoNhan](https://github.com/DuongCaoNhan)
- **Email**: duongcaonhan@example.com
- **LinkedIn**: [Duong Cao Nhan](https://linkedin.com/in/duongcaonhan)

---

⭐ **Star this repository** if you find it helpful!

🚀 **Happy analyzing your YouTube data!** 📺✨
